// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.1
// source: user.v1.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "user.v1";

export interface UserInfo {
  accordLogin: string;
  accordPassword: string;
  lksLogin: string;
  lksPassword: string;
}

export interface User {
  id: number;
  isActive: boolean;
}

export interface ChangeStatusRequest {
  userId: number;
  activeStatus: boolean;
}

export interface UpdateRequest {
  userId: number;
  login: string;
  password: string;
}

export interface GetUserInfoRequest {
  userId: number;
}

export const USER_V1_PACKAGE_NAME = "user.v1";

export interface UserServiceClient {
  getUserInfo(request: GetUserInfoRequest): Observable<UserInfo>;

  changeUserStatus(request: ChangeStatusRequest): Observable<Empty>;

  updateAccord(request: UpdateRequest): Observable<Empty>;

  updateLks(request: UpdateRequest): Observable<Empty>;
}

export interface UserServiceController {
  getUserInfo(request: GetUserInfoRequest): Promise<UserInfo> | Observable<UserInfo> | UserInfo;

  changeUserStatus(request: ChangeStatusRequest): void;

  updateAccord(request: UpdateRequest): void;

  updateLks(request: UpdateRequest): void;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserInfo", "changeUserStatus", "updateAccord", "updateLks"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
