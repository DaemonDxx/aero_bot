// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.1
// source: order.v1.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from './google/protobuf/timestamp';

export const protobufPackage = 'order.v1';

export interface Flight {
  id: number;
  flightNumber: string;
  airplane: string;
  departure: Timestamp | undefined;
  arrival: Timestamp | undefined;
  duration: number;
  status: number;
}

export interface OrderItem {
  id: number;
  flights: Flight[];
  departure: Timestamp | undefined;
  arrival: Timestamp | undefined;
  description: string;
  route: string;
  confirmDate: Timestamp | undefined;
}

export interface Order {
  id: number;
  userId: number;
  items: OrderItem[];
  status: number;
}

export interface ActualOrderRequest {
  userId: number;
}

export interface ActualOrderResponse {
  order: Order | undefined;
}

export const ORDER_V1_PACKAGE_NAME = 'order.v1';

export interface OrderServiceClient {
  getActualOrder(request: ActualOrderRequest): Observable<ActualOrderResponse>;
}

export interface OrderServiceController {
  getActualOrder(
    request: ActualOrderRequest,
  ):
    | Promise<ActualOrderResponse>
    | Observable<ActualOrderResponse>
    | ActualOrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getActualOrder'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('OrderService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const ORDER_SERVICE_NAME = 'OrderService';
